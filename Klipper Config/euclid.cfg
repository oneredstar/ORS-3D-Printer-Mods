[board_pins euclid_probe]
aliases:
  z_endstop_pin=PG10

[probe]
## Euclid Probe
pin: ^z_endstop_pin          ; enable internal pullup resistor as this is an NC switch  use ! to invert if needed
x_offset: -28.0               ; probe is offset +28.0mm from nozzle
y_offset: -21.0               ; probe is +25mm from nozzle in Y direction
speed: 5                     ; probing speed of 5mm/second ideal is <10mm/sec  
samples: 2                   ; number of probes to perform per sample
samples_result: average      ; normalization method: see config reference
sample_retract_dist: 5.0
samples_tolerance: 0.0075
samples_tolerance_retries: 3

[bed_mesh]
horizontal_move_z: 15
probe_count: 10,10
mesh_min: 60,60
mesh_max:500,500
speed: 300

[z_tilt]
horizontal_move_z: 25
retry_tolerance: 0.01
speed: 300

[force_move]
enable_force_move: True

### MACROS ###
[gcode_macro _EUCLID_VARS]
variable_macro_travel_speed: 300
gcode:
  {% for var, value in printer["gcode_macro _EUCLID_VARS"].items() %}
    {action_respond_info(var ~ ": " ~ value)}
  {% endfor %}

[homing_override]
# needs force_move enabled for kinematic position function
gcode: SET_KINEMATIC_POSITION Z=0
  G91                   ; relative coordinate system
  G0 Z20 F500           ; raise bed to 20
  G28 Y                 ; home Y first.  This makes sure the extruder doesn't hit the Euclid dock when homing X first
  G28 X                 ; home X
  M117 Starting to home z...
  QUERY_PROBE
  M401                  ; deploy Euclid Probe
  _move_to_center        ; move to center of the bed
  M400                  ; wait for moves to complete
  G28 Z                 ; home Z
  G0 Z20 F500           ; raise bed to 20
  M402                  ; retract Euclid Probe
axes: z
set_position_z: 12

[gcode_macro Z_TILT_ADJUST]
rename_existing: _Z_TILT_ADJUST
gcode:
  QUERY_PROBE           ; check Euclid probe status
  M401                  ; deploy Euclid Probe if needed
  _Z_TILT_ADJUST        ; Z Tilt Adjust
  M402                  ; dock Euclid Probe

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
gcode:
  QUERY_PROBE                         ; check Euclid probe status
  M401                                ; deploy Euclid Probe if needed
  {% if params.AREA_START and params.AREA_END %}
      {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
      {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
      {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
      {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
      {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

      {% set area_min_x = params.AREA_START.split(",")[0]|float %}
  {% set area_min_y = params.AREA_START.split(",")[1]|float %}
  {% set area_max_x = params.AREA_END.split(",")[0]|float %}
  {% set area_max_y = params.AREA_END.split(",")[1]|float %}

  {% if bedMeshConfig.probe_count.split(",")|length == 2 %}
          {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
          {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
      {% else %}
          {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
          {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
      {% endif %}

  {% set meshMaxPointX = meshPointX %}
  {% set meshMaxPointY = meshPointY %}


      {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
          {% if area_min_x - mesh_area_offset >=  safe_min_x %}
              {% set area_min_x = area_min_x - mesh_area_offset %}
          {% else %}
              {% set area_min_x = safe_min_x %}
          {% endif %}

          {% if area_min_y - mesh_area_offset >=  safe_min_y %}
              {% set area_min_y = area_min_y - mesh_area_offset %}
          {% else %}
              {% set area_min_y = safe_min_y %}
          {% endif %}

          {% if area_max_x + mesh_area_offset <=  safe_max_x %}
              {% set area_max_x = area_max_x + mesh_area_offset %}
          {% else %}
              {% set area_max_x = safe_max_x %}
          {% endif %}

          {% if area_max_y + mesh_area_offset <=  safe_max_y %}
              {% set area_max_y = area_max_y + mesh_area_offset %}
          {% else %}
              {% set area_max_y = safe_max_y %}
          {% endif %}

          {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
          {% if meshPointX < min_probe_count %}
              {% set meshPointX = min_probe_count %}
          {% endif %}
      {% if meshPointX > meshMaxPointX %}
              {% set meshPointX = meshMaxPointX %}
          {% endif %}

          {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
          {% if meshPointY < min_probe_count %}
              {% set meshPointY = min_probe_count %}
          {% endif %}
      {% if meshPointY > meshMaxPointY %}
              {% set meshPointY = meshMaxPointY %}
          {% endif %}

          _BED_MESH_CALIBRATE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} profile={params.PROFILE|default("ratos")}
      {% else %}
          _BED_MESH_CALIBRATE { rawparams }
      {% endif %}
  {% else %}
      _BED_MESH_CALIBRATE { rawparams }
  {% endif %}
  M402                                ; dock Euclid Probe

[gcode_macro PROBE_CALIBRATE]
rename_existing: _PROBE_CALIBRATE
gcode:
  {% set speed = printer["gcode_macro _EUCLID_VARS"].macro_travel_speed|float * 60 %}
  QUERY_PROBE                         ; check Euclid probe status
  M401                                ; deploy Euclid Probe if needed
  _move_to_center                     ; Move to center    
  G90                                 ; absolute coordinate system
  G0 X250 Y250 F{speed}               ; move to Center
  _PROBE_CALIBRATE { rawparams }      ; Bed Mesh Calibrate

[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
gcode:
  QUERY_PROBE           ; check Euclid probe status
  M401                  ; deploy Euclid Probe if needed
  G0 Z20 F500           ; raise bed to 20
  _move_to_center       ; Move to center       
  _PROBE_ACCURACY       ; Check Probe Accuracy
  M402                  ; Dock Euclid Probe

[gcode_macro _error_if_probe_deployed]
gcode:
    QUERY_PROBE                  ; check probe status
    _do_error_if_probe_deployed  ; logic check to verify probe is not already deployed

[gcode_macro _do_error_if_probe_deployed]
gcode:
    {% if not printer.probe.last_query %}
      {action_raise_error("Euclid Probe is already deployed - Remove and Return it to the dock")}
    {% endif %}

[gcode_macro _error_if_probe_not_deployed]
gcode:
    QUERY_PROBE
    _do_error_if_probe_not_deployed

[gcode_macro _do_error_if_probe_not_deployed]
gcode:
    {% if printer.probe.last_query %}
      {action_raise_error("Euclid Probe failed to deploy!")}
    {% endif %}

# Macro to Deploy Bed Probe
[gcode_macro M401]
gcode:
  {% set speed = printer["gcode_macro _EUCLID_VARS"].macro_travel_speed|float * 60 %}
  G90
  {% if printer.probe.last_query %}
    M117 Deploying probe...
    G0 Z20 F{speed}        ;  set approach elevation of Z20
    _move_to_dock_corner   ;  move to common start point
    _move_to_dockside      ;  move to sude of dock to pickup probe
    _move_to_dock          ;  translate over probe pickup location
    G4 P500               ;  pause for firmware detection
    _move_out_of_dock       ;  move probe out of dock
    G0 Z20 F{speed}       ;  raise to elevation of Z20
    _error_if_probe_not_deployed
  {% else %}
    M117 Error deploying probe!
  {% endif %}


# Macro to Stow Bed Leveling Probe
[gcode_macro M402]
gcode:
    {% set speed = printer["gcode_macro _EUCLID_VARS"].macro_travel_speed|float * 60 %}
    G90
    {% if not printer.probe.last_query %}
      M117 Stowing probe...
      G0 Z20 F{speed}             ;  set approach elevation of Z20
      _move_to_dock_corner         ;  move to common start point
      _move_out_of_dock             ;  move toolhead to dock exit position
      _move_to_dock                ;  move probe into to dock 
      G4 P250                     ;  pause
      _move_to_dockside            ;  swipe probe off 
      G4 P250                     ;  pause
      G0 Z20 F{speed}             ;  move up to elevation of Z20
      _move_to_center
      _error_if_probe_deployed
    {% else %}
      M117 Error stowing probe!
    {% endif %}

[gcode_macro _move_to_dock]
gcode:
  {% set speed = printer["gcode_macro _EUCLID_VARS"].macro_travel_speed|float * 60 %}
  G90                      ; absolute coordinate system
  G0 X0 Y0 Z20 F{speed}    ; move to X4 Y5

[gcode_macro _move_to_dockside]
# Location adjacent to dock 
gcode:
  {% set speed = printer["gcode_macro _EUCLID_VARS"].macro_travel_speed|float * 60 %}
  G90                        ; absolute coordinate system
  G0 X50 Y0 Z20 F{speed}     ; move to X34 Y5 Z20

[gcode_macro _move_out_of_dock]
# Location adjacent to dock for exit Y+40 
gcode:
  {% set speed = printer["gcode_macro _EUCLID_VARS"].macro_travel_speed|float * 60 %}
  G90                        ; absolute coordinate system
  G0 X0 Y75 Z20 F{speed}     ; move to X4 Y72 Z20

[gcode_macro _move_to_dock_corner]
# Location at corner of dock.  This gives a safe place for the extruder to go.  Use this to avoid extruder running into the dock if starting around x=0 
gcode:
  {% set speed = printer["gcode_macro _EUCLID_VARS"].macro_travel_speed|float * 60 %}
  G90                         ; absolute coordinate system
  G0 X50 Y75 Z20 F{speed}     ; move to X34 Y72 Z20

[gcode_macro _move_to_center]
# Location at center of the bed
gcode:
  {% set speed = printer["gcode_macro _EUCLID_VARS"].macro_travel_speed|float * 60 %}
  G90                          ; absolute coordinate system
  G0 X250 Y250 Z20 F{speed}    ; move to X34 Y72 Z20